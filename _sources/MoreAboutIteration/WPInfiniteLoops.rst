..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: moreiter-11-
   :start: 1

üë©‚Äçüíª Bucles infinitos
----------------------

Aunque el libro de texto tiene un l√≠mite de tiempo que impide que se ejecute una ventana de c√≥digo activa
indefinidamente, a√∫n tendr√° que esperar un poco si su programa tiene un bucle infinito. Si
accidentalmente crea uno fuera del libro de texto, no tendr√° la misma protecci√≥n.

Entonces, ¬øc√≥mo puedes reconocer cuando est√°s en peligro de hacer un bucle infinito?

En primer lugar, si la variable que est√° utilizando para determinar si el ciclo while debe continuar
nunca se reasigna dentro del ciclo while, entonces su c√≥digo tendr√° un ciclo infinito. (A menos que, por supuesto, use ``break`` para
salir del bucle.)

Adem√°s, si la condici√≥n while es ``while True:`` y no hay interrupci√≥n, ¬°ese es otro caso de un bucle infinito!

.. sourcecode:: python

    while True:
        print("¬øEsto se detendr√°?")

    print("Hemos escapado.")

Otro caso en el que es probable que ocurra un bucle infinito es cuando ha reasignado el valor de la variable utilizada en la instrucci√≥n while de una manera que impide que el bucle se complete. Este es un ejemplo a continuaci√≥n (si toma demasiado tiempo, intente volver a cargar la p√°gina y siga este ejemplo en codelens):

.. activecode:: ac14_11_1

    b = 15

    while b < 60:
        b = 5
        print("Bugs")
        b = b + 7

Observe c√≥mo, en este caso, b se establece inicialmente en 15 fuera del bucle while y luego se reasigna
el valor de 5 en el interior, en la l√≠nea 4. Para cuando se haya agregado 7 a b en la l√≠nea 6, entonces tenemos que
verificar si b es menor que 60. Debido a que no es as√≠, nuevamente ejecutamos la l√≠nea 4 y establecemos el valor de b en 5
otra vez. No hay forma de salir de este bucle.

A veces, los programas pueden tardar un tiempo en ejecutarse, entonces, ¬øc√≥mo puede determinar si su c√≥digo solo habla un rato o si est√° atascado dentro de un bucle infinito?. Las declaraciones impresas son para las personas, ¬°as√≠ que aprov√©chalas!. Puede agregar declaraciones de impresi√≥n para realizar un seguimiento de c√≥mo est√°n cambiando sus variables a medida que el programa procesa las instrucciones que se les dan. A continuaci√≥n se muestra un ejemplo de un bucle infinito. Intente agregar declaraciones impresas para ver de d√≥nde viene. Cuando haya terminado, consulte la respuesta para ver cu√°l fue nuestra soluci√≥n.

#.

   .. tabbed:: q1

        .. tab:: Question

            .. actex:: ac14_11_2

                d = {'x': []}

                while len(d.keys()) <= 2:
                    print('Diccionarios')
                    d['x'].append('d')


        .. tab:: Answer

            .. actex:: ac14_11_3

                d = {'x': []}
                print("comenzando el ciclo while")
                while len(d.keys()) <= 2:
                    print("n√∫mero de claves en d:", len(d.keys()))
                    print('Diccionarios')
                    d['x'].append('d')
                    print("n√∫mero de claves en d despu√©s de agregar:", len(d.keys()))
                print("final del ciclo while")
