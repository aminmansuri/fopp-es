..  Copyright (C) Paul Resnick.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: sort-6-
   :start: 1


üë©‚Äçüíª Cu√°ndo usar una expresi√≥n lambda
------------------------------------------

Aunque a menudo puede usar una expresi√≥n lambda o una funci√≥n con nombre de manera intercambiable al ordenar, generalmente es mejor usar expresiones lambda hasta que el proceso sea demasiado complicado, y luego se debe usar una funci√≥n. Por ejemplo, en los siguientes ejemplos, clasificaremos las claves de un diccionario por las propiedades de sus valores. Cada clave es un nombre de estado y cada valor es una lista de nombres de ciudades.

Para nuestro primer orden de clasificaci√≥n, queremos ordenar los estados en orden por la longitud del primer nombre de ciudad. Aqu√≠, es bastante f√°cil calcular esa propiedad. ``states[state]`` es la lista de ciudades asociadas con un estado en particular. Entonces, si ``state`` es una lista de strings de ciudades, ``len(states[state][0])`` es la longitud del primer nombre de ciudad. Por lo tanto, podemos usar una expresi√≥n lambda:

.. activecode:: ac18_6_1

    states = {"Minnesota": ["St. Paul", "Minneapolis", "Saint Cloud", "Stillwater"],
              "Michigan": ["Ann Arbor", "Traverse City", "Lansing", "Kalamazoo"],
              "Washington": ["Seattle", "Tacoma", "Olympia", "Vancouver"]}

    print(sorted(states, key=lambda state: len(states[state][0])))

Eso ya est√° empujando los l√≠mites de lo complejo que puede ser una expresi√≥n lambda antes de que sea realmente dif√≠cil de leer (o depurar).

Para nuestro segundo orden de clasificaci√≥n, la propiedad por la que queremos clasificar es el n√∫mero de ciudades que comienzan con la letra 'S'. La funci√≥n que define esta propiedad es m√°s dif√≠cil de expresar, ya que requiere un filtro y un patr√≥n de acumulaci√≥n de conteo. Por lo tanto, es mejor definir una funci√≥n separada con nombre. Aqu√≠, hemos optado por hacer una expresi√≥n lambda que busque el valor asociado con el estado particular y pasar ese valor a la funci√≥n nombrada `s_cities_count`. Podr√≠amos haber pasado solo la clave, pero entonces la funci√≥n tendr√≠a que buscar el valor, y ser√≠a un poco confuso, a partir del c√≥digo, averiguar en qu√© diccionario se supone que debe buscarse la clave. Aqu√≠, nosotros hicmimos la b√∫squeda directamente en la expresi√≥n lambda, lo que deja un poco m√°s claro que solo estamos ordenando las claves del diccionario de estados en funci√≥n de una propiedad de sus valores. Tambi√©n facilita la reutilizaci√≥n de la funci√≥n de conteo en otras listas de ciudades, incluso si no est√°n integradas en ese diccionario de estados en particular.

.. activecode:: ac18_6_2

    def s_cities_count(city_list):
        ct = 0
        for city in city_list:
            if city[0] == "S":
                ct += 1
        return ct

    states = {"Minnesota": ["St. Paul", "Minneapolis", "Saint Cloud", "Stillwater"],
              "Michigan": ["Ann Arbor", "Traverse City", "Lansing", "Kalamazoo"],
              "Washington": ["Seattle", "Tacoma", "Olympia", "Vancouver"]}

    print(sorted(states, key=lambda state: s_cities_count(states[state])))

En este punto del curso, ni siquiera sabemos c√≥mo hacer ese filtro y acumulaci√≥n como parte de una expresi√≥n lambda. Hay una manera, usando algo llamado listas de comprensi√≥n, pero a√∫n no lo hemos cubierto.

Habr√° otras situaciones que son a√∫n m√°s complicadas que esta. ¬°En algunos casos, pueden ser demasiado complicados de resolver con una expresi√≥n lambda! Siempre puede recurrir a escribir una funci√≥n con nombre cuando una expresi√≥n lambda ser√° demasiado complicada.
