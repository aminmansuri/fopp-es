..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: dictionaries-10-
   :start: 1

üë©‚Äçüíª Cuando Usar un Diccionario
--------------------------------

Ahora que tiene experiencia en el uso de listas y diccionarios, tendr√° que decidir cu√°l es el mejor para cada situaci√≥n. Las siguientes pautas le ayudar√°n a reconocer cu√°ndo un diccionario ser√° beneficioso:

* Cuando un dato consiste en un conjunto de propiedades de un solo elemento, un diccionario a menudo es mejor. Podr√≠a intentar hacer un seguimiento mental de que la propiedad del c√≥digo postal est√° en el √≠ndice 2 de una lista, pero su c√≥digo ser√° m√°s f√°cil de leer y cometer√° menos errores si puede buscar `mydiction['zipcode']` que si busque `mylst[2]`.
* Cuando tiene una colecci√≥n de pares de datos, y a menudo tendr√° que buscar uno de los pares en funci√≥n de su primer valor, es mejor usar un diccionario que una lista de tuplas (clave, valor). Con un diccionario, puede encontrar el valor de cualquier tupla (clave, valor) buscando la clave. Con una lista de tuplas, necesitar√≠a recorrer la lista, examinando cada par para ver si ten√≠a la clave que desea.
* Por otro lado, si tendr√° una colecci√≥n de pares de datos donde varios pares comparten el mismo primer elemento de datos, entonces no puede usar un diccionario, porque un diccionario requiere que todas las claves sean distintas entre s√≠.

.. Ver√° estructuras de datos m√°s complicadas m√°s adelante, pero por ahora imagine datos sobre estados de EE. UU., Que contienen datos de poblaci√≥n, el nombre del estado, la capital del estado y la apertura del estado. Si tuviera que poner la informaci√≥n sobre cada estado en una lista, entonces el orden de cada bit de datos tendr√≠a que ser coherente. Puede verse as√≠:

.. .. sourcecode python

.. data = [4779736, "Alabama", "Montgomery", "AL", 710231, "Alaska", "Juneau", "AK", 6392017, "Arizona", "Phoenix" , "AZ" ......]

.. Para extraer todos los datos de poblaci√≥n, por ejemplo, debe saber que siempre fue la primera informaci√≥n sobre un estado, y que cada estado ten√≠a cuatro piezas de informaci√≥n. Luego, necesitar√≠a descubrir c√≥mo extraer la informaci√≥n que podr√≠a verse as√≠:

.. .. activecode ac10_10_1

..     data = [4779736, "Alabama", "Montgomery", "AL", 710231, "Alaska", "Juneau", "AK", 6392017, "Arizona", "Phoenix" , "AZ"]

..     position = 0

..     for info in data:
..         if position % 4 == 0:
..             print("Population of a State: " + str(data[position]))

.. Si la poblaci√≥n estaba en cambio en un diccionario, entonces podr√≠amos tener un diccionario para buscar recuentos de poblaci√≥n y otro para buscar abreviaturas, como se ilustra a continuaci√≥n. (M√°s adelante en el curso, veremos estructuras de datos anidados, lo que nos permitir√≠a tener un solo diccionario, cada uno de cuyos valores era una lista o un diccionario).

.. .. sourcecode python

..     state_populations = {"Alabama": 4779736, "Alaska": 710231 "Arizona" : 6392017,  ...}
..     state_abbreviations = {"Alabama": "AL", "Alaska": "AL", "Arizona": "AZ",  ...}




