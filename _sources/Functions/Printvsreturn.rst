..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: func-11-
   :start: 1

üë©‚Äçüíª Print vs. return
----------------------

Muchos programadores principiantes encuentran la distinci√≥n entre impresi√≥n y devoluci√≥n muy confusa, especialmente porque la mayor√≠a de
las ilustraciones de valores de retorno en textos introductorios como este muestran el valor devuelto de una llamada a funci√≥n print
it, como en ``print(square(g(2)))``.

La declaraci√≥n impresa es bastante f√°cil de entender. Toma un objeto python y genera una representaci√≥n impresa del mismo
en la ventana de salida. Puede pensar en la declaraci√≥n impresa como algo que toma un objeto de la tierra del
programa y lo hace visible a la tierra del observador humano.

.. note::

   **La impresi√≥n es solo para las personas**. Recuerda ese eslogan. La impresi√≥n no tiene ning√∫n efecto en la ejecuci√≥n en curso de un programa. No asigna un valor a una variable. No devuelve un valor de una llamada de funci√≥n.

Si est√° confundido, es probable que la fuente de su confusi√≥n sea realmente acerca de los valores devueltos y la evaluaci√≥n de
expresiones complejas. Una funci√≥n que devuelve un valor est√° produciendo un valor para usar *por el programa*, en particular para
usar en la parte del c√≥digo donde se invoc√≥ la funci√≥n. Recuerde que cuando se invoca una funci√≥n, la funci√≥n
se ejecuta el bloque de c√≥digo: todo ese c√≥digo sangrado bajo la instrucci√≥n ``def`` se ejecuta, siguiendo las reglas de el
Lenguaje formal de Python para lo que debe y no debe ejecutarse a medida que avanza. Pero cuando la funci√≥n regresa, el control se va
a volver a la ubicaci√≥n de la llamada, y un valor de retorno puede volver con √©l.

Ya ha visto algunas llamadas a funciones en el Cap√≠tulo 1. Cuando te contamos sobre la funci√≥n ``square`` que definimos,
viste que la expresi√≥n ``square(2)`` eval√∫a el valor entero ``4``.

Esto se debe a que la funci√≥n ``square`` *devuelve* un valor: el cuadrado de cualquier entrada que se le pase.

Si un valor devuelto es para uso *por el programa*, ¬øpor qu√© hizo esa invocaci√≥n de funci√≥n para devolver un valor? Qu√© hacer si se
utiliza el resultado de la llamada a la funci√≥n? Hay tres posibilidades

#. Gu√°rdalo para despu√©s.
    El valor devuelto puede ser:

    * Asignado a una variable. Por ejemplo, ``w = cuadrado (3)``
    * Poner en una lista. Por ejemplo, ``L.append(cuadrado (3))``
    * Poner en un diccionario. Por ejemplo, ``d[3] = cuadrado (3)``

#. √öselo en una expresi√≥n m√°s compleja.
    En ese caso, piense en el valor de retorno como
    reemplazando todo el texto de la invocaci√≥n de la funci√≥n. Por ejemplo, si hay una l√≠nea
    del c√≥digo ``w = cuadrado (cuadrado (3) + 7) - 5``, piense en el valor de retorno 9 que reemplaza el
    texto cuadrado (3) en esa invocaci√≥n, por lo que se convierte en ``square(9 + 7) -5``.

#. Imprimirlo para consumo humano.
    Por ejemplo, ``print(square(3))`` da salida a 9.
    Tenga en cuenta que, a menos que el valor de retorno se guarde primero como en la posibilidad 1, estar√° disponible
    solo a los humanos que miran el √°rea de salida, no al programa mientras contin√∫a ejecut√°ndose.

Si su √∫nico prop√≥sito al ejecutar una funci√≥n es hacer que una salida sea visible para el consumo humano, hay dos formas de
hacerlo. Puede poner una o m√°s declaraciones de impresi√≥n dentro de la definici√≥n de la funci√≥n y no molestarse en devolver nada de
la funci√≥n (se devolver√° el valor Ninguno). En ese caso, invoque la funci√≥n sin una declaraci√≥n de impresi√≥n. Por
ejemplo, puede tener una l√≠nea completa de c√≥digo que lea ``f(3)``. Eso ejecutar√° la funci√≥n f y tirar√° el
valor de retorno. Por supuesto, si el cuadrado no imprime nada o tiene efectos secundarios, es in√∫til llamarlo y hacer
nada con el valor de retorno. Pero con una funci√≥n que tiene declaraciones de impresi√≥n dentro, puede ser bastante √∫til.

La otra posibilidad es devolver un valor de la funci√≥n e imprimirlo, como en ``print(f(3))``. Cuando empiezas a
escriba programas m√°s grandes y complejos, esto ser√° m√°s t√≠pico. De hecho, la declaraci√≥n impresa generalmente solo ser√° una
medida temporal mientras desarrolla el programa. Eventualmente, terminar√° llamando f y guardando el valor de retorno
o us√°ndolo como parte de una expresi√≥n m√°s compleja.

Sabr√° que realmente ha internalizado la idea de las funciones cuando ya no est√© confundido acerca de la diferencia
entre impresi√≥n y devoluci√≥n. ¬°Sigue trabajando hasta que tenga sentido para ti!

**Revisa tu entendimiento**

.. mchoice:: question11_11_1
   :answer_a: 2
   :answer_b: 5
   :answer_c: 7
   :answer_d: 25
   :answer_e: Error: y tiene un valor pero x es una variable independiente dentro de la funci√≥n square
   :correct: c
   :feedback_a: 2 es la entrada; El valor devuelto por h es el que se imprimir√°.
   :feedback_b: No olvides que 2 se eleva al cuadrado.
   :feedback_c: primer cuadrado 2, luego agregue 3.
   :feedback_d: 3 se agrega al resultado de la cuadratura 2
   :feedback_e: cuando se llama al cuadrado, x est√° vinculado al valor del par√°metro que se pasa, 2.
   :practice: T

   ¬øCu√°l ser√° el siguiente c√≥digo de salida?

   .. code-block:: python

       def square(x):
           return x*x

       def g(y):
           return y + 3

       def h(y):
           return square(y) + 3

       print(h(2))

.. mchoice:: question11_11_2
   :answer_a: 2
   :answer_b: 5
   :answer_c: 7
   :answer_d: 10
   :answer_e: Error: no puede anidar llamadas de funci√≥n
   :correct: d
   :feedback_a: Mejor lea la secci√≥n anterior una vez m√°s.
   :feedback_b: Mejor lea la secci√≥n anterior una vez m√°s.
   :feedback_c: Eso es h(2), pero se pasa a g.
   :feedback_d: h(2) devuelve 7, por lo que y est√° vinculado a 7 cuando se invoca g.
   :feedback_e: Ah, pero puede anidar llamadas de funci√≥n.
   :practice: T

   ¬øCu√°l ser√° el siguiente c√≥digo de salida?
   
   .. code-block:: python 

       def square(x):
           return x*x
           
       def g(y):
           return y + 3
           
       def h(y):
           return square(y) + 3
           
       print((g(h(2)))
