..  Copyright (C)  Brad Miller, Paul Resnick, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, Dario Mitchell, and Jackie Cohen.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: data-15-
   :start: 1

üë©‚Äçüíª Hard-Coding
-----------------

Cuando comience a programar, ver√° que hay muchas formas de resolver problemas. Tambi√©n encontrar√° que una de las emociones
de programaci√≥n es la facilidad con la que puedes hacer cosas correctamente en las que cualquiera podr√≠a cometer errores f√°cilmente. Por ejemplo,
crear un c√≥digo muy peque√±o para encontrar el car√°cter 1047 en una oraci√≥n que podr√≠a ser miles de
letras, aprender√° c√≥mo hacer exactamente el mismo c√°lculo con muchos datos diferentes.

A menudo le diremos en este libro de texto *no implemente hard-code* para las respuestas. Qu√© significa eso?

Algunas cosas en la programaci√≥n solo se pueden hacer escribi√©ndolas. Como has visto, cuando tienes que asignar un valor a una
variable, simplemente escribe algo como ``xyz = 6``. Ninguna otra manera.

Pero en la mayor√≠a de los casos, es mejor no hacer c√°lculos en su cabeza o escribir respuestas completas a los problemas de programaci√≥n a
mano. Ah√≠ es donde entra **Hard Coding**. "No codificar" b√°sicamente significa que debe confiar en su c√≥digo, su l√≥gica,
su programa, y usted *no* deber√≠a escribir las cosas a mano o hacer c√°lculos en su cabeza, incluso si puede hacerlo f√°cilmente.

Cuando est√© escribiendo c√≥digo o trabajando en la respuesta a un ejercicio de programaci√≥n, debe preguntarse: *¬øMi respuesta ser√≠a
correcta incluso si las variables proporcionadas tienen valores diferentes?* Si la respuesta a esa pregunta es no, probablemente sea
Hard Coding, que debe evitar, ¬°y probablemente haya al menos una forma un poco m√°s concisa de construir su respuesta!

Por ejemplo, en este c√≥digo siguiente, si se le pide en un ejercicio que cree una variable ``zx`` y le asigne el valor de
la suma del valor de ``y`` y el valor de ``x``, escribiendo ``zx = 55`` es *hard-coding*.

.. actex:: hard_coding_example
   
   x = 20
   y = 35
   abc = 62

La operaci√≥n ``20 + 35`` puede ser matem√°tica f√°cil de hacer en su cabeza o con una calculadora, pero cuando aprende a programar, usted
debe capacitarse para notar patrones √∫tiles de c√≥mo resolver problemas que le facilitar√°n la vida (quiz√°s
m√°s all√° de la programaci√≥n, incluso).

La forma correcta de responder a ese tipo de ejercicio ser√≠a escribir: ``zx = y + x`` (o ``zx = x + y``, ya que simplemente
record√≥ el orden de las operaciones). Eso no es  hard-coding, y ser√° correcto sin importar que valores de ``x``
e ``y`` sean.

En el c√≥digo anterior, si el valor de ``x`` fuera ``40``, ``55`` no ser√≠a el valor correcto para ``zx``. Pero
``zx = y + x`` a√∫n ser√≠a absolutamente correcto.

Intente todo lo que pueda para no confiar en su brillante pero falible cerebro humano para hacer *c√≥digo* cuando programe -- use
¬°su cerebro para determinar c√≥mo escribir el c√≥digo correcto para resolver el problema por ti! Es por eso que le pedimos que evite
el hard-coding para la mayor√≠a de los ejercicios en este libro.
