..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: debug-7-
   :start: 1

üë©‚Äçüíª Conozca sus mensajes de error
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Muchos problemas en su programa conducir√°n a un mensaje de error. Por ejemplo como estaba
escribiendo y probando este cap√≠tulo del libro escrib√≠ la siguiente versi√≥n del
programa de ejemplo en la secci√≥n anterior.

.. sourcecode:: python

   current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
   wait_time_str = input("Cu√°ntas horas quiere esperar")

   current_time_int = int(current_time_str)
   wait_time_int = int(wait_time_int)

   final_time_int = current_time_int + wait_time_int
   print(final_time_int)

¬øPuedes ver lo que est√° mal simplemente mirando el c√≥digo? Tal vez tal vez no. Nuestro cerebro
tiende a ver lo que creemos que hay, as√≠ que a veces es muy dif√≠cil encontrar el problema
solo mirando el c√≥digo. Especialmente cuando es nuestro propio c√≥digo y estamos seguros de que
¬°Hemos hecho todo bien!

Intentemos el programa nuevamente, pero esta vez en un activecode:

.. activecode:: ac4_7_1

   current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
   wait_time_str = input("Cu√°ntas horas quiere esperar")

   current_time_int = int(current_time_str)
   wait_time_int = int(wait_time_int)

   final_time_int = current_time_int + wait_time_int
   print(final_time_int)


¬°Aj√°! Ahora tenemos un mensaje de error que podr√≠a ser √∫til. El error de nombre nos dice
que ``wait_time_int`` no est√° definido. Tambi√©n nos dice que el error est√° en la l√≠nea 5.
Esa es **realmente** informaci√≥n √∫til. Ahora mira la l√≠nea cinco y ver√°s que
``wait_time_int`` se usa tanto en el lado izquierdo como en el derecho de la sentencia de asignaci√≥n.

.. note::
   Las descripciones de error que ve en el activecode pueden ser diferentes (¬°y m√°s comprensibles!) que en un c√≥digo regular
   con el Int√©rprete de Python. El int√©rprete en activecode est√° limitado de muchas maneras, pero est√° destinado a principiantes,
   incluyendo la redacci√≥n elegida para describir los errores.

.. mchoice:: question4_7_1
   :answer_a: No puede usar una variable en los lados izquierdo y derecho de una sentencia de asignaci√≥n.
   :answer_b: wait_time_int no tiene un valor, por lo que no se puede usar en el lado derecho.
   :answer_c: Esto no es realmente un error, Python no funciona.
   :correct: b
   :feedback_a: No, puede, siempre y cuando todas las variables en el lado derecho ya tengan valores.
   :feedback_b: S√≠. Las variables ya deben tener valores para poder usarse en el lado derecho.
   :feedback_c: No, No, No!
   :practice: T

   ¬øCu√°l de las siguientes explica por qu√© ``wait_time_int = int(wait_time_int)`` es un error?


Al escribir y utilizar este libro en los √∫ltimos a√±os, hemos recopilado muchos datos
estad√≠sticos sobre los programas en este libro. Aqu√≠ hay algunas estad√≠sticas sobre mensajes
de error para el ejercicio que hemos estado viendo.

=================== ======= =======
Mensaje             N√∫mero  Porcentaje
=================== ======= =======
ParseError:         4999    54.74%
TypeError:          1305    14.29%
NameError:          1009    11.05%
ValueError:         893     9.78%
URIError:           334     3.66%
TokenError:         244     2.67%
SyntaxError:        227     2.49%
TimeLimitError:     44      0.48%
IndentationError:   28      0.31%
AttributeError:     27      0.30%
ImportError:        16      0.18%
IndexError:         6       0.07%
=================== ======= =======

Casi el 90% de los mensajes de error encontrados para este problema son ParseError,
TypeError, NameError o ValueError. Veremos estos errores en tres etapas:

* Primero definiremos qu√© significan estos cuatro mensajes de error.
* Luego, veremos algunos ejemplos que causan estos errores.
* Finalmente, veremos formas de ayudar a descubrir la causa de estos mensajes.


ParseError
^^^^^^^^^^

Los errores de an√°lisis ocurren cuando comete un error en la sintaxis de su programa.
Los errores son como cometer errores gramaticales por escrito. Si no usas puntos y
comas en tu escritura, entonces est√°s dificultando que otros lectores entiendan
lo que intentas decir. Del mismo modo, Python tiene ciertas reglas gramaticales que deben
ser seguidas o Python no puede entender lo que est√°s tratando de decir.

Por lo general, ParseErrors se remonta a los caracteres de puntuaci√≥n faltantes, como
par√©ntesis, comillas o comas. Recuerda que en Python las comas est√°n acostumbradas a
par√°metros separados a las funciones. Los par√©ntesis deben estar equilibrados, o Python piensa
que intenta incluir todo lo que sigue como par√°metro para alguna funci√≥n.

Aqu√≠ hay un par de ejemplos de ParseError en el programa de ejemplo que hemos estado usando.
Vea si puede descubrir qu√© los caus√≥.

.. tabbed:: db_tabs1

    .. tab:: Pregunta

        Encuentra y corrige el error en el siguiente c√≥digo.

        .. activecode:: ac4_7_2

           current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
           wait_time_str = input("¬øCu√°ntas horas quieres esperar?"

           current_time_int = int(current_time_str)
           wait_time_int = int(wait_time_str)

           final_time_int = current_time_int + wait_time_int
           print(final_time_int)

    .. tab:: Respuesta

        .. sourcecode:: python

           current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
           wait_time_str = input("¬øCu√°ntas horas quieres esperar?"

           current_time_int = int(current_time_str)
           wait_time_int = int(wait_time_str)

           final_time_int = current_time_int + wait_time_int
           print(final_time_int)

        Dado que el mensaje de error nos se√±ala la l√≠nea 4, esto puede ser un poco confuso. Si
        mira la l√≠nea cuatro con cuidado, ver√° que no hay ning√∫n problema con la
        sintaxis. Entonces, en este caso, el siguiente paso deber√≠a ser retroceder y mirar la
        l√≠nea anterior. En este caso, si observa cuidadosamente la l√≠nea 2, ver√° que
        falta un par√©ntesis derecho al final de la l√≠nea. Recu√©rdalo,
        los par√©ntesis deben estar equilibrados. Dado que Python permite que las sentencias contin√∫en
        varias l√≠neas dentro de par√©ntesis, python continuar√° escaneando posteriormente
        l√≠neas que buscan el par√©ntesis de equilibrio correcto. Sin embargo en este caso
        encuentra el nombre ``current_time_int`` y querr√° interpretarlo como
        otro par√°metro para la funci√≥n de entrada. Pero no hay una coma que
        separe la cadena anterior de la variable, en lo que respecta a Python
        el error aqu√≠ es una coma que falta. Desde tu perspectiva es que falta un
        par√©ntesis.

**Encontrar pistas** ¬øC√≥mo puedes ayudarte a encontrar estos problemas? Un truco que puede ser
muy valioso en esta situaci√≥n es simplemente comenzar comentando el n√∫mero de l√≠nea
que est√° marcado que contiene el error. Si se comenta la l√≠nea cuatro, el mensaje de error
ahora cambia a punto a la l√≠nea 5. Ahora te preguntas, ¬øestoy realmente tan mal que ya
tiene dos l√≠neas seguidas que tienen errores? Tal vez, podr√≠as llevado al extremo,
podr√≠as comentar todas las l√≠neas restantes en el programa. Ahora el mensaje de error
cambia a ``TokenError: EOF in multi-line statement`` (TokenError: EOF en sentencia de varias l√≠neas)
Esta es una forma muy t√©cnica de decir que Python lleg√≥ al final del archivo (EOF) mientras todav√≠a estaba buscando
alguna cosa. En este caso un par√©ntesis derecho.



.. tabbed:: db_tabs2

    .. tab:: Pregunta

        Encuentra y corrige el error en el siguiente c√≥digo.

        .. activecode:: ac4_7_3

           current_time_str = input("¬øCu√°l es la" hora actual "(en horas 0-23)?")
           wait_time_str = input("¬øCu√°ntas horas quieres esperar?")

           current_time_int = int(current_time_str)
           wait_time_int = int(wait_time_str)

           final_time_int = current_time_int + wait_time_int
           print(final_time_int)

    .. tab:: Respuesta

        .. sourcecode:: python

           current_time_str = input("¬øCu√°l es la" hora actual "(en horas 0-23)?")
           wait_time_str = input("¬øCu√°ntas horas quieres esperar?")

           current_time_int = int(current_time_str)
           wait_time_int = int(wait_time_str)

           final_time_int = current_time_int + wait_time_int
           print(final_time_int)

        El mensaje de error lo se√±ala a la l√≠nea 1 y en este caso es exactamente donde
        se produce el error. En este caso, su mayor pista es notar la diferencia
        en el resalte de la l√≠nea. Observe que las palabras "hora actual" son un
        color diferente a los que las rodean. ¬øPor qu√© es esto? Porque "hora actual"
        est√° entre comillas dobles dentro de otro par de comillas dobles. Python piensa que
        est√°s terminando una cadena, luego tienes otros nombres y finalmente
        otra cadena. Pero no ha separado estos nombres o cadenas por comas,
        y no los ha agregado junto con el operador de concatenaci√≥n (+). Asi que,
        hay varias correcciones que puede hacer. Primero podr√≠as hacer que el
        argumento para ingresar sea el siguiente: ``"¬øCu√°l es la 'hora actual' (en horas 0-23)?"``
        Tenga en cuenta que aqu√≠ hemos utilizado correctamente comillas simples dentro de comillas dobles.
        Otra opci√≥n es simplemente eliminar las comillas dobles adicionales. Porque estabas
        citando "hora actual" de todos modos? ``"¬øCu√°l es la hora actual (en horas 0-23)"``


**Encontrar pistas** Si sigue los mismos consejos para el √∫ltimo problema, comente la
l√≠nea uno, inmediatamente recibir√° un mensaje de error diferente. Aqu√≠ es donde necesitas
tener mucho cuidado y no entrar en p√°nico. El mensaje de error que obtienes ahora es: ``NameError: name
'current_time_str' is not defined on line 4``. Puedes estar muy tentado a pensar
que esto est√° relacionado de alguna manera con el problema anterior e inmediatamente concluir que
hay algo mal con el nombre de la variable ``current_time_str`` pero si usted
reflexiona por un minuto, ver√° que al comentar la l√≠nea 1 ha causado un
error nuevo y no relacionado. Es decir, has comentado la creaci√≥n del nombre.
``current_time_str``. Entonces, por supuesto, cuando desee convertirlo a un ``int``, lo har√°
obtener el NameError. S√≠, esto puede ser confuso, pero ser√° mucho m√°s f√°cil con
experiencia. Tambi√©n es importante mantener la calma y evaluar cada nueva pista cuidadosamente,
no pierdas el tiempo persiguiendo problemas que realmente no existen.


Elimine el comentario de la l√≠nea 1 y volver√° al ParseError. Otra pista es eliminar una
posible fuente de error. En lugar de comentar toda la l√≠nea, podr√≠as
intentar asignar ``current_time_str`` a un valor constante. Por ejemplo, podr√≠as hacer que
la l√≠nea uno se vea as√≠: ``current_time_str = "10"  #input("¬øCu√°l es el"hora
actual "(en horas 0-23)?")``. Ahora ha asignado ``current_time_str`` a la cadena
10, y coment√≥ la sentencia input. ¬°Y ahora el programa funciona! Puede llegar a la
conclusi√≥n de que el problema debe tener algo que ver con la funci√≥n de entrada.


TypeError
^^^^^^^^^

Los errores de tipo se producen cuando intenta combinar dos objetos que no son compatibles. Por
ejemplo, intenta sumar un n√∫mero entero y una cadena. Por lo general, los errores de tipo pueden ser
aislados a l√≠neas que usan operadores matem√°ticos, y generalmente el n√∫mero de l√≠nea
dado por el mensaje de error es una indicaci√≥n precisa de la l√≠nea.

Aqu√≠ hay un ejemplo de un error de tipo creado por un alumno . A ver si puedes encontrar
y corregir el error.

.. activecode:: ac4_7_4

    a = input('wpisz godzine')
    x = input('wpisz liczbe godzin')
    int(x)
    int(a)
    h = x // 24
    s = x % 24
    print (h, s)
    a = a + s
    print ('godzina teraz', a)



.. reveal:: dbex4_rev
    :showtitle: Mu√©strame la soluci√≥n
    :hidetitle: Esconder

    .. admonition:: Soluci√≥n

        Al encontrar este error, hay pocas lecciones en las que pensar. Primero, puedes
        sentir que es muy desconcertante que no puedas entender todo el programa.
        A menos que hable el alumno, esto no ser√° un problema. Pero, aprendiendo lo que tu
        puedes ignorar, y lo que se necesita para centrarse es una parte muy importante del
        proceso de depuraci√≥n. Segundo, los tipos y los buenos nombres de variables son importantes y
        pueden ser muy √∫tiles. En este caso, a y x no son nombres particularmente √∫tiles,
        y en particular no te ayudan a pensar en los tipos de tu
        variables, que como el mensaje de error implica, es la ra√≠z del problema aqu√≠.
        Al resto de las lecciones regresaremos en un minuto.

        El mensaje de error proporcionado le da una pista bastante grande.
        ``TypeError: tipos de operando no admitidos para FloorDiv: 'str' y 'number' en l√≠nea: 5``
        En la l√≠nea cinco estamos tratando de usar la divisi√≥n de enteros en x y 24. El error
        El mensaje le indica que est√° tratando de dividir una cadena por un n√∫mero. En esto
        en caso de que sepa que 24 es un n√∫mero, entonces x debe ser una cadena. ¬øPero c√≥mo? Usted puede
        ver la llamada a la funci√≥n en la l√≠nea 3 donde est√° convirtiendo x en un entero.
        ``int(x)`` o eso crees. Esta es la lecci√≥n tres y es uno de los errores m√°s comunes
        que vemos en la programaci√≥n introductoria. Cu√°l es la diferencia entre ``int(x)`` y ``x = int(x)``

¬†¬†¬†¬†¬†¬†¬†¬†* La expresi√≥n ``int(x)`` convierte la cadena referenciada por x en un n√∫mero entero pero no la almacena en ning√∫n lado. Es muy com√∫n suponer que ``int(x)`` de alguna manera cambia a x, ¬°ya que eso es lo que pretendes!. Lo que hace que esto sea muy complicado es que ``int(x)`` es una expresi√≥n v√°lida, por lo que no causa ning√∫n tipo de error, sino que el error ocurre m√°s adelante en el programa.

¬†¬†¬†¬†¬†¬†¬†¬†* La sentencia de asignaci√≥n ``x = int(x)`` es muy diferente. Nuevamente, la expresi√≥n ``int(x)`` convierte la cadena referenciada por x en un n√∫mero entero, pero esta vez tambi√©n cambia lo que x hace referencia para que x ahora se refiera al valor entero devuelto por la funci√≥n ``int``.

¬†¬†¬†¬†¬†¬†¬†¬†Entonces, la soluci√≥n a este problema es cambiar las l√≠neas 3 y 4 para que sean sentencias de asignaci√≥n.


**Encontrar pistas** Una cosa que puede ayudarlo en esta situaci√≥n es imprimir los
valores y los tipos de las variables involucradas en la sentencia que est√° causando el
error. Puede intentar agregar una sentencia print despu√©s de la l√≠nea 4 ``print(x, type(x))``
veremos que al menos hemos confirmado que x es de tipo cadena. Ahora necesitas
Comenzar√°s a trabajar hacia atr√°s a trav√©s del programa. Tienes que preguntarte, ¬ød√≥nde se usa x?
¬øen el programa? x se usa en las l√≠neas 2, 3 y, por supuesto, 5 y 6 (donde estamos obteniendo
un error). Entonces, tal vez mueva la sentencia print para que est√© despu√©s de la l√≠nea 2 y nuevamente despu√©s de 3.
La l√≠nea 3 es donde espera que el valor de x se cambie a un entero. Podr√≠a la l√≠nea 4
estar misteriosamente cambiando x de nuevo a una cadena? No es muy probable. Entonces el valor y el tipo
de x es justo lo que esperar√≠as despu√©s de la l√≠nea 2, pero no despu√©s de la l√≠nea 3. Esto
le ayuda a aislar el problema en la l√≠nea 3. De hecho, si emplea uno de nuestras anteriores
t√©cnicas de comentar la l√≠nea 3, ver√° que esto no tiene impacto en el error,
y es una gran pista de que la l√≠nea 3 tal como est√° escrita actualmente es in√∫til.


NameError
^^^^^^^^^

Los errores de nombre casi siempre significan que ha utilizado una variable antes de que tenga un valor.
A menudo, NameErrors son simplemente causados por errores tipogr√°ficos en su c√≥digo. Pueden ser dif√≠ciles de detectar si
no tienes buen ojo para detectar errores ortogr√°ficos. Otras veces puedes simplemente
recordar mal el nombre de una variable o incluso una funci√≥n a la que quieres llamar. Ha
visto un ejemplo de un NameError al comienzo de esta secci√≥n. Aqu√≠ hay otro.
Vea si puede hacer que este programa se ejecute correctamente:

.. activecode:: ac4_7_5

    str_time = input("Cu√°l es la hora actual?")
    str_wait_time = input("Cu√°l es el n√∫mero de horas que desea esperar?")
    time = int(str_time)
    wai_time = int(str_wait_time)

    time_when_alarm_go_off = time + wait_time
    print(time_when_alarm_go_off)

.. reveal:: db_ex5_reveal
    :showtitle: Mu√©strame la soluci√≥n

    .. admonition:: Soluci√≥n

        En este ejemplo, el estudiante parece ser un deletreador bastante malo, ya que hay un buen
        n√∫mero de errores tipogr√°ficos para corregir. El primero se identifica como wait_time no es
        definido en la l√≠nea 6. Ahora, en este ejemplo, puede ver que hay
        ``str_wait_time`` en la l√≠nea 2, y ``wai_time`` en la l√≠nea 4 y ``wait_time`` en la
        l√≠nea 6. Si no tiene ojos muy agudos, es f√°cil pasar por alto que hay un
        error tipogr√°fico en la l√≠nea 4.

**Encontrar pistas** Con errores de nombre, una de las mejores cosas que puede hacer es usar el
editor o funci√≥n de b√∫squeda del navegador. Muy a menudo si busca la palabra exacta en el
mensaje de error ocurrir√° una de dos cosas:

1. La palabra que est√° buscando aparecer√° solo una vez en su c√≥digo, tambi√©n es probable
que estar√° en el lado derecho de una sentencia de asignaci√≥n, o como un par√°metro para
una funci√≥n. Eso deber√≠a confirmar que tienes un error tipogr√°fico en alguna parte. Si el nombre en
la pregunta **es** lo que pensaste que deber√≠a ser, entonces probablemente tengas un error tipogr√°fico a la izquierda
de una sentencia de asignaci√≥n en una l√≠nea antes de que aparezca su mensaje de error. Comience
mirando hacia atr√°s en sus sentencias de asignaci√≥n. En algunos casos es realmente agradable
dejar visibles todas las cadenas resaltadas de la funci√≥n de b√∫squeda, ya que ayudar√°n
a encpntrar muy r√°pidamente una l√≠nea donde podr√≠a haber esperado que su variable fuera
resaltada.

2. Lo segundo que puede pasar es que mirar√°s directamente a una l√≠nea
donde esperaba que la b√∫squeda encontrara la cadena en cuesti√≥n, pero no ser√°
resaltado. Muy a menudo ese ser√° el error tipogr√°fico all√≠ mismo.


Aqu√≠ hay otro m√°s para que lo intentes:

.. activecode:: ac4_7_6

    n = input("¬øQu√© hora es ahora (en horas)?")
    n = imt(n)
    m = input("¬øCu√°ntas horas quieres esperar?")
    m = int(m)
    q = m % 12
    print("Ahora la hora es", q)


.. reveal:: db_ex6_reveal
    :showtitle:  Mu√©strame la Soluci√≥n

    .. admonition:: Soluci√≥n

        Este es una vez m√°s un error tipogr√°fico, pero el error tipogr√°fico no est√° en un nombre variable, pero
        m√°s bien, el nombre de una funci√≥n. La estrategia de b√∫squeda te ayudar√≠a con esto
        f√°cilmente, pero tambi√©n hay otra pista para ti. El editor en el
        libro de texto, as√≠ como casi todos los editores de Python en el mundo le proporcionan
        pistas de color. Observe que en la l√≠nea 2 la funci√≥n ``imt`` no est√° resaltada en
        azul como la palabra ``int`` en la l√≠nea 4.


Y un √∫ltimo pedazo de c√≥digo para arreglar.

.. activecode:: ac4_7_7

    present_time = input("Ingrese la hora actual en horas:")
    set_alarm = input("Establecer las horas de alarma:")
    int (present_time, set_time, alarm_time)
    alarm_time = present_time + set_alarm
    print(alarm_time)

.. reveal:: db_ex7_reveal
    :showtitle: Mu√©strame la Soluci√≥n

    .. admonition:: Soluci√≥n

        En este ejemplo, el mensaje de error se trata de ``set_time`` no definido en la l√≠nea 3.
        En este caso, el nombre indefinido no se usa en una sentencia de asignaci√≥n, pero es
        usado como par√°metro (incorrectamente) para una llamada a la funci√≥n. Una b√∫squeda en ``set_time``
        revela que, de hecho, solo se usa una vez en el programa. ¬øQuiso decir el autor?
        ``set_alarm``? Si hacemos esa suposici√≥n, obtenemos inmediatamente otro error
        ``NameError: el nombre 'alarm_time' no est√° definido en la l√≠nea: 3``. La variable
        ``alarm_time`` se define en la l√≠nea 4, pero eso no nos ayuda en la l√≠nea 3.
        Adem√°s, ahora tenemos que hacer la pregunta: ¬øesta llamada a la funci√≥n
        ``int(present_time, set_alarm, alarm_time)`` siquiera est√° haciendo uso correcto de la
        funci√≥n ``int``? La respuesta a eso es un rotundo no. Hagamos una lista de todos las
        cosas mal con la l√≠nea 3:

        1.  ``set_time`` no est√° definido y nunca se usa, el autor probablemente quiso decir ``set_alarm``.
        2.  ``alarm_time`` no se puede usar como par√°metro antes de que se defina, ¬°incluso en la siguiente l√≠nea!
        3.  ``int`` solo puede convertir una cadena en un entero a la vez.
        4.  Finalmente, ``int`` debe usarse en una sentencia de asignaci√≥n. Incluso si se llamara ``int`` con el n√∫mero correcto de par√°metros, no tendr√≠a ning√∫n efecto real.


.. advanced topic!

.. present_time = int(input("Enter the present time(hhmm):"))
.. print type(present_time)

.. min = _ * 60
.. tot_min = min + [2, 4]
.. print(tot_min)
.. set_hrs = int(input("Enter the hours (hhmm):"))
.. alarm_time = present_time + set_hrs
.. print(alarm_time)


ValueError
^^^^^^^^^^

Se producen errores de valor cuando pasa un par√°metro a una funci√≥n y la funci√≥n est√°
esperando ciertas limitaciones en los valores, y el valor pasado no es compatible.
Podemos ilustrar eso con el programa anterior de dos maneras diferentes.

.. c√≥digo activo :: ac4_7_8

   current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
   current_time_int = int(current_time_str)

   wait_time_str = input("¬øCu√°ntas horas quieres esperar?")
   wait_time_int = int(wait_time_int)

   final_time_int = current_time_int + wait_time_int
   print(final_time_int)


Ejecute el programa, pero en lugar de escribir algo en el cuadro de di√°logo, simplemente haga clic en Aceptar. Le
deber√≠a aparecer el siguiente mensaje de error:  ``ValueError: invalid literal for int() with
base 10: '' on line: 4`` Este error no se debe a que haya cometido un error en su
programa. Aunque a veces queremos verificar la entrada del usuario para asegurarnos de que sea v√°lida,
pero todav√≠a no tenemos todas las herramientas que necesitamos para eso. El error ocurre porque el
el usuario no nos dio algo que podamos convertir a un entero, en su lugar le dimos un
string vac√≠o. Intenta ejecutar el programa nuevamente. Ahora esta vez ingrese "diez" en lugar de
el n√∫mero 10. Recibir√° un mensaje de error similar.

Los ValueErrors no siempre son causados por un error de entrada del usuario, pero en este programa ese es el
caso. Volveremos a ver ValueErrors nuevamente cuando lleguemos a programas m√°s complicados.
Por ahora vale la pena repetir que debe realizar un seguimiento de las restricciones necesarias
para sus variables, y entender qu√© espera su funci√≥n. Puede hacer esto
escribindo comentarios en su c√≥digo, o nombrar sus variables de una manera en que le recuerden
su forma correcta