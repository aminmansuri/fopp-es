..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: debug-1-
   :start: 1

.. index:: boundary conditions, testing, debugging

üë©‚Äçüíª Depuraci√≥n
===================

La programaci√≥n es un proceso complejo. Como lo hacen los seres humanos, a menudo pueden ocurrir errores.
Los errores de programaci√≥n se denominan **bugs** y el proceso
de rastrearlos y corregirlos se llama **debuggin**. Hubo reclamos de
que en 1945, una polilla muerta caus√≥ un problema en el rel√© n√∫mero 70, panel F, de una
de las primeras computadoras en Harvard, y el t√©rmino **bug** (insecto) se ha mantenido en uso.
Para m√°s informaci√≥n sobre este evento hist√≥rico, vea `first bug <http://en.wikipedia.org/wiki/File:H96566k.jpg>`__.

Una de las habilidades m√°s importantes que necesitas adquirir para completar este libro con √©xito es la
capacidad de depurar tus programas. La depuraci√≥n puede ser la menos apreciada y
poco ense√±ada habilidad en inform√°tica introductoria. Por esa raz√≥n estamos introduciendo una
serie de "interludios de depuraci√≥n". La depuraci√≥n es una habilidad que debes dominar con el tiempo, y
algunos de los consejos y trucos son espec√≠ficos de diferentes aspectos de la programaci√≥n de Python. Entonces busca
interludios adicionales de Way of the Programmer en el resto de este libro.


La programaci√≥n es algo extra√±o en cierto sentido. Aqu√≠ est√° el por qu√©. Como programadores, pasamos el 99% de nuestro tiempo
tratando de hacer que nuestro programa funcione. Luchamos, nos estresamos, pasamos horas profundamente frustrados
tratando de hacer que nuestro programa se ejecute correctamente. Luego, cuando lo ponemos en marcha, celebramos
y pasamos a la siguiente tarea de programaci√≥n. Pero aqu√≠ est√° el secreto,
cuando tienes √©xito, eres feliz, tu cerebro libera un poco de qu√≠mico que te hace
sentir bien. Necesitas organizar tu forma de programar para que tenga muchos peque√±os √©xitos. Eso
resulta en que a tu cerebro no le importe mucho si has escrito con √©xito hola mundo,
o una r√°pida transformaci√≥n de Fourier (conf√≠a en m√≠ es dif√≠cil) todav√≠a obtienes esa peque√±a versi√≥n que te hace
feliz. Cuando eres feliz, quieres continuar y resolver el siguiente peque√±o problema. Esencialmente,
te digo lo una vez m√°s, comienza con algo peque√±o, haz que algo peque√±o funcione y luego agr√©galo.

C√≥mo evitar la depuraci√≥n
-------------------------

Quiz√°s la lecci√≥n m√°s importante en la depuraci√≥n es que es **en gran medida evitable** --
si trabajas con cuidado.

1. **Comience peque√±o** Este es probablemente el consejo m√°s importante para los programadores en
todos los niveles. Por supuesto, es tentador sentarse y poner en marcha un programa completo a la vez. Pero,
cuando el programa, inevitablemente, no funciona, entonces tienes una gran cantidad de opciones para las cosas
que podr√≠an estar mal. ¬øDonde empezar? ¬øD√≥nde mirar primero? ¬øC√≥mo averiguar qu√© sali√≥ mal?
Llegar√© a eso en la siguiente secci√≥n. Entonces, comience con algo realmente peque√±o. Tal vez solo dos
l√≠neas y luego aseg√∫rese de que funciona bien. Pulsar el bot√≥n de correr es r√°pido y f√°cil, y te da
informaci√≥n inmediata sobre si lo que acabas de hacer est√° bien o no. Otro inmediato es
el beneficio de tener algo peque√±o que funciona es que tiene algo que entregar.
Un programa peque√±o e incompleto, casi siempre, es mejor que nada.


2. **Mant√©ngalo funcionando** Una vez que tenga una peque√±a parte de su programa trabajando, el siguiente paso es
deicidir algo peque√±o para agregarle. Si sigues agregando peque√±as piezas del programa uno
a la vez, es mucho m√°s f√°cil descubrir qu√© sali√≥ mal, ya que lo m√°s probable es que
el problema va a estar en el nuevo c√≥digo que acaba de agregar. Menos c√≥digo nuevo significa que es m√°s f√°cil
averiguar d√≥nde est√° el problema.

Esta noci√≥n de **Hacer que algo funcione y mantenerlo funcionando** es un mantra que puedes repetir
a lo largo de tu carrera como programador. Es una excelente manera de evitar las frustraciones mencionadas
encima. Pi√©nsalo de esta manera. Cada vez que tienes un poco de √©xito, tu cerebro libera
un poco de qu√≠mico que te hace feliz. Entonces, puedes mantenerte feliz y hacer la programaci√≥n
m√°s agradable creando muchas peque√±as victorias para ti.

Ok, veamos un ejemplo. Vamos a resolver el problema planteado en la pregunta 3 al final del
cap√≠tulo simple de datos de Python. Pregunte al usuario por el tiempo ahora (en horas 0 -- 23), y solicite la
cantidad de horas para esperar. Su programa deber√≠a mostrar qu√© hora ser√° en el reloj cuando
la alarma se apaga.

Entonces, ¬øpor d√≥nde empezar? El problema requiere dos entradas del usuario, as√≠ que comencemos
all√≠ y aseg√∫rese de que podamos obtener los datos que necesitamos.

.. activecode:: db_ex3_1

   current_time = input("¬øCu√°l es la hora actual (en horas)?")
   wait_time = input("¬øCu√°ntas horas quieres esperar?")

   print(current_time)
   print(wait_time)


Si a√∫n no lo ha hecho, haga clic en Ejecutar: acost√∫mbrese a verificar si las cosas peque√±as funcionan
antes de continuar

Hasta ahora vamos bien. Ahora demos el siguiente paso. Tenemos que averiguar cu√°nto ser√° el tiempo
esperando ``wait_time`` en n√∫mero de horas. Una buena primera aproximaci√≥n a eso es simplemente agregar
``wait_time`` a ``current_time`` e imprima el resultado. Entonces intentemos eso.

.. activecode:: db_ex3_2

   current_time = input("¬øCu√°l es la hora actual (en horas 0--23)?")
   wait_time = input("¬øCu√°ntas horas quieres esperar?")

   print(current_time)
   print(wait_time)

   final_time = current_time + wait_time
   print(final_time)

Hmm, cuando ejecutas ese ejemplo, ves que algo extra√±o ha sucedido.

.. mchoice:: db_q_ex3_1
   :answer_a: Python es est√∫pido y no sabe c√≥mo sumar correctamente.
   :answer_b: No hay nada malo aqu√≠.
   :answer_c: Python est√° haciendo la concatenaci√≥n de cadenas, no la suma de enteros.
   :feedback_a: No, Python probablemente no est√° equivocado.
   :feedback_b: No, intente sumar los dos n√∫meros juntos, definitivamente obtendr√° un resultado diferente.
   :feedback_c: ¬°S√≠! Recuerde que la entrada devuelve una cadena. Ahora necesitaremos convertir la cadena a un entero
   :correct: c

   ¬øCu√°l de las siguientes opciones describe mejor lo que est√° mal en el ejemplo anterior?

Este error fue probablemente bastante simple de detectar, porque imprimimos el valor de
``final_time`` y es f√°cil ver que los n√∫meros simplemente se concatenaron juntos.
Entonces, ¬øqu√© hacemos con el problema? Necesitaremos convertir tanto ``current_time``
y ``wait_time`` a ``int``. En esta etapa de su desarrollo de programaci√≥n, puede ser una buena
idea el incluir el tipo de la variable en el nombre de la variable en s√≠. As√≠ que echemos un vistazo a otra
iteraci√≥n del programa que hace eso, y la conversi√≥n a entero.


.. activecode:: db_ex3_3

   current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
   wait_time_str = input("¬øCu√°ntas horas quieres esperar?")

   current_time_int = int(current_time_str)
   wait_time_int = int(wait_time_str)

   final_time_int = current_time_int + wait_time_int
   print(final_time_int)


Eso es mucho mejor, y de hecho, dependiendo de las horas que elija, puede ser exactamente correcto.
Si ingres√≥ 8 para la hora actual y 5 para el tiempo de espera, entonces 13 es correcto. Pero si
ingres√≥ 17 (5pm) para las horas y 9 para el tiempo de espera, entonces el resultado de 26 no es correcto.
Esto ilustra un aspecto importante de **prueba**, que es importante probar su
c√≥digo en un rango de entradas. Es especialmente importante probar su c√≥digo en **condiciones de contorno**.
En este caso, deber√≠a probar su programa durante horas, incluidos 0, 23 y algunas en el medio.
Deber√≠a probar sus tiempos de espera para 0, y algunos n√∫meros realmente grandes. Qu√© pasa con los
¬øn√∫meros negativos? Los n√∫meros negativos no tienen sentido, pero dado que realmente no tenemos las herramientas
para tratar de decirle al usuario cuando algo est√° mal, no nos preocuparemos por eso todav√≠a.

Finalmente, tenemos que tener en cuenta esos n√∫meros que son mayores que 23. Para esto necesitaremos
un √∫ltimo paso, utilizando el operador de m√≥dulo.

.. activecode:: db_ex3_4

   current_time_str = input("¬øCu√°l es la hora actual (en horas 0-23)?")
   wait_time_str = input("¬øCu√°ntas horas quieres esperar?")

   current_time_int = int(current_time_str)
   wait_time_int = int(wait_time_str)

   final_time_int = current_time_int + wait_time_int
   
   final_answer = final_time_int % 24

   print("La hora despu√©s de esperar es:", final_answer)

Por supuesto, incluso en esta simple progresi√≥n, hay otras formas en que podr√≠a haberse confundido.
Veremos algunos de ellos y c√≥mo los rastrear√° en la siguiente secci√≥n.


**Chequea tu entendimiento**

.. mchoice:: question4_1_1
   :answer_a: Rastrear errores de programaci√≥n y corregirlos.
   :answer_b: Eliminar todos los errores de tu programa.
   :answer_c: Encontrar todos los errores en el programa.
   :answer_d: Arreglar los errores en el programa.
   :correct: a
   :feedback_a: Los errores de programaci√≥n se denominan bugs y el proceso de encontrarlos y eliminarlos de un programa se denomina debuggin.
   :feedback_b: Tal vez, pero eso no es de lo que estamos hablando en este contexto.
   :feedback_c: Esto es parcialmente correcto. Pero, la depuraci√≥n es m√°s que solo encontrar los errores. ¬øQu√© necesitas hacer una vez que los encuentres?
   :feedback_d: Esto es parcialmente correcto. Pero, la depuraci√≥n es m√°s que solo solucionar los errores. ¬øQu√© necesita hacer antes de poder solucionarlos?

   La depuraci√≥n es:
