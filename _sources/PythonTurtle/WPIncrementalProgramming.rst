..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: turtle-8-
   :start: 1

üë©‚Äçüíª  Programaci√≥n Incremental
===============================

A estas alturas, es probable que haya encontrado ocasiones en las que su c√≥digo ser√° largo o complejo. Si tu
aborde problemas como este escribiendo todo el c√≥digo y *luego* ejecut√°ndolo, probablemente
se siente frustrado por el proceso de depuraci√≥n. ¬°Hay maneras de facilitar la programaci√≥n!.

1. **Comience peque√±o** Este es probablemente el consejo m√°s importante para los programadores en
todos los niveles. Por supuesto, es tentador sentarse y poner en marcha un programa completo a la vez. Pero,
cuando el programa, inevitablemente, no funciona, entonces tienes una gran cantidad de opciones para las cosas
eso podr√≠a estar mal. ¬øDonde empezar? ¬øD√≥nde mirar primero? ¬øC√≥mo averiguar qu√© sali√≥ mal?
Llegar√© a eso en la siguiente secci√≥n. Entonces, comience con algo realmente peque√±o. Tal vez solo dos
l√≠neas y luego aseg√∫rese de que funciona bien. Pulsar el bot√≥n de correr es r√°pido y f√°cil, y te da
retroalimentaci√≥n inmediata sobre si lo que acaba de hacer est√° bien o no. Otro inmediato
El beneficio de tener algo peque√±o que funciona es que tiene algo que entregar.
programa peque√±o e incompleto, casi siempre es mejor que nada.

2. **Mant√©ngalo funcionando** Una vez que tenga una peque√±a parte de su programa trabajando, el siguiente paso es
para descubrir algo peque√±o para agregarle. Si sigues agregando peque√±as piezas del programa uno
a la vez, es mucho m√°s f√°cil descubrir qu√© sali√≥ mal, ya que lo m√°s probable es que
El problema va a estar en el nuevo c√≥digo que acaba de agregar. Menos c√≥digo nuevo significa que es m√°s f√°cil
averiguar d√≥nde est√° el problema.

Esta noci√≥n de **Hacer que algo funcione y mantenerlo funcionando** es un mantra que puedes repetir
a lo largo de tu carrera como programador. Es una excelente manera de evitar las frustraciones mencionadas
encima. Pi√©nsalo de esta manera. Cada vez que tienes un poco de √©xito, tu cerebro libera un peque√±o
Un poco de qu√≠mico que te hace feliz. Entonces, puedes mantenerte feliz y hacer programaci√≥n
m√°s agradable creando muchas peque√±as victorias para ti.

A continuaci√≥n ya hemos comenzado a construir una casa. Para practicar la programaci√≥n incremental, intente dibujar
El resto de la casa. Cada vez que dibuje algo nuevo en la pantalla, ejecute el programa para ver si
se ejecut√≥ de la manera que esperabas!

.. activecode:: ac3_100_1

    import turtle
    wn = turtle.Screen()
    bob = turtle.Turtle()
    bob.right(90)
    bob.forward(50)
    bob.left(90)
    bob.forward(50)

    # ¬°Agrega tu c√≥digo debajo!


