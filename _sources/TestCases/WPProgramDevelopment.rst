..  Copyright (C)  Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris
    Meyers, and Dario Mitchell.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: progdev-1-
   :start: 1

üë©‚Äçüíª Desarrollo del programa
------------------------------------

En este punto, deber√≠a poder ver las funciones completas y decir qu√©
ellas hacen. Adem√°s, si ha estado haciendo los ejercicios, ha escrito algunas
peque√±as funciones. A medida que escribe funciones m√°s grandes, puede comenzar a tener m√°s
dificultad, especialmente con tiempo de ejecuci√≥n y errores sem√°nticos.

Para tratar con programas cada vez m√°s complejos, vamos a sugerir una t√©cnica
llamado **desarrollo incremental**. El objetivo del desarrollo incremental es que
evite largas sesiones de depuraci√≥n agregando y probando solo una peque√±a cantidad de c√≥digo
a la vez

Si escribe pruebas unitarias antes de realizar el desarrollo incremental, podr√° seguir su progreso a medida que el c√≥digo pase m√°s y m√°s pruebas. Alternativamente, puede escribir pruebas adicionales en cada etapa del desarrollo incremental.
Luego podr√° verificar si cualquier cambio de c√≥digo que realice en una etapa posterior del desarrollo hace que una de las pruebas anteriores, que sol√≠a pasar, ya no pasara.

Como ejemplo, suponga que desea encontrar la distancia entre dos puntos, dado
por las coordenadas (x\ :sub:`1`\ , y\ :sub:`1`\ ) y
(x\ :sub:`2`\ , y\ :sub:`2`\ ). Seg√∫n el teorema de Pit√°goras, la distancia es:

.. image:: Figures/distance_formula.png
   :alt: F√≥rmula de distancia

El primer paso es considerar c√≥mo deber√≠a ser una funci√≥n de ``distance`` en
Python. En otras palabras, ¬øcu√°les son las entradas (par√°metros) y cu√°l es la salida?
(valor de retorno)?

En este caso, los dos puntos son las entradas, que podemos representar usando cuatro
par√°metros. El valor de retorno es la distancia, que es un valor de coma flotante.

Ya podemos escribir un resumen de la funci√≥n que captura nuestro pensamiento hasta ahora.

.. sourcecode:: python
    
    def distance(x1, y1, x2, y2):
        return None

Obviamente, esta versi√≥n de la funci√≥n no calcula distancias; siempre
devuelve None. Pero es sint√°cticamente correcto y se ejecutar√°, lo que significa
que podemos probarlo antes de hacerlo m√°s complicado.

Importamos el m√≥dulo de prueba para permitirnos escribir una prueba unitaria para la funci√≥n. La distancia entre cualquier punto y s√≠ mismo debe ser 0.

.. activecode:: ac400_1_1
    
    import test
    def distance(x1, y1, x2, y2):
        return None

    test.testEqual(distance(1, 2, 1, 2), 0)

La funci√≥n ``testEqual`` del m√≥dulo de prueba llama a la funci√≥n de distancia con entradas de muestra: (1,2, 1,2).
Los primeros 1,2 son las coordenadas del primer punto y los segundos 1,2 son las coordenadas del segundo punto.
¬øCu√°l es la distancia entre estos dos puntos? Cero. ``testEqual`` compara lo que devuelve la funci√≥n de distancia
y el None que se devuelve.

No est√° devolviendo la respuesta correcta, por lo que no aprobamos la prueba. Vamos a arreglar eso.

.. activecode:: ac400_1_2

    import test
    def distance(x1, y1, x2, y2):
        return 0.0

    test.testEqual(distance(1, 2, 1, 2), 0)

Ahora pasamos la prueba. Pero realmente, esa no es una prueba suficiente.

.. admonition:: Ampliar el programa ...

   En la l√≠nea 6, escriba otra prueba unitaria. Use (1,2, 4,6) como los par√°metros para la funci√≥n de distancia. ¬øQu√© tan separados est√°n estos dos puntos? Use ese valor (en lugar de 0) como la respuesta correcta para esta prueba unitaria.

   En la l√≠nea 7, escriba otra prueba unitaria. Use (0,0, 1,1) como los par√°metros para la funci√≥n de distancia. ¬øQu√© tan separados est√°n estos dos puntos? Use ese valor como la respuesta correcta para esta prueba unitaria.

   ¬øHay otros casos l√≠mite que crees que deber√≠as considerar? ¬øQuiz√°s puntos con n√∫meros negativos para valores x o valores y?


**Al probar una funci√≥n, es esencial saber la respuesta correcta.**

Para la segunda prueba, la distancia horizontal es igual a 3 y la distancia vertical es igual a 4; de esa manera, el resultado es
5 (la hipotenusa de un tri√°ngulo 3-4-5). Para la tercera prueba, tenemos un tri√°ngulo 1-1-sqrt(2).

.. activecode:: ac400_1_3

    import test
    def distance(x1, y1, x2, y2):
        return 0

    test.testEqual(distance(1,2, 1,2), 0)
    test.testEqual(distance(1,2, 4,6), 5)
    test.testEqual(distance(0,0, 1,1), 2**0.5)



La primera prueba pasa pero las otras fallan ya que la funci√≥n de distancia a√∫n no contiene todos los pasos necesarios.

En este punto, hemos confirmado que la funci√≥n es sint√°cticamente correcta y podemos comenzar a agregar l√≠neas de c√≥digo.
Despu√©s de cada cambio incremental, probamos la funci√≥n nuevamente. Si se produce un error en alg√∫n momento, sabemos d√≥nde debe estar
--- en la √∫ltima l√≠nea que agregamos.

Un primer paso l√≥gico en el c√°lculo es encontrar las diferencias x\ :sub:`2`\ - x\ :sub:`1`\ e y\ :sub:`2`\ - y\ :sub:`1`\ .
Almacenaremos esos valores en variables temporales llamadas ``dx`` y ``dy``.

.. sourcecode:: python
    
    def distance(x1, y1, x2, y2):
        dx = x2 - x1
        dy = y2 - y1
        return 0.0

Luego calculamos la suma de los cuadrados de ``dx`` y ``dy``.

.. sourcecode:: python
    
    def distance(x1, y1, x2, y2):
        dx = x2 - x1
        dy = y2 - y1
        dsquared = dx**2 + dy**2
        return 0.0

De nuevo, podr√≠amos ejecutar el programa en esta etapa y verificar el valor de ``dsquared`` (que
deber√≠a ser 25).

Finalmente, usando el exponente fraccional ``0.5`` para encontrar la ra√≠z cuadrada,
calculamos y devolvemos el resultado.

.. index:: testing, unit test

.. activecode:: ac400_1_4
    
    import test
    def distance(x1, y1, x2, y2):
        dx = x2 - x1
        dy = y2 - y1
        dsquared = dx**2 + dy**2
        result = dsquared**0.5
        return result

    test.testEqual(distance(1,2, 1,2), 0)
    test.testEqual(distance(1,2, 4,6), 5)
    test.testEqual(distance(0,0, 1,1), 2**0.5)


..     test.testEqual(distance(0,0, 1,1), 1.41)

.. .. admonition Fix the error ...

..    Dos de las pruebas pasan pero la √∫ltima falla. ¬øSigue habiendo un error en la funci√≥n?

.. Frecuentemente descubrimos errores en las funciones que estamos escribiendo. Sin embargo, es posible que haya un error en una prueba. Aqu√≠ el error est√° en la precisi√≥n de la respuesta correcta.

.. La tercera prueba falla porque por defecto testEqual verifica 5 d√≠gitos a la derecha del punto decimal.

..    - Cambie ``1.41`` a ``1.41421`` y ejec√∫telo. La prueba pasar√°.

.. Hay circunstancias en las que 2 d√≠gitos a la derecha del punto decimal son lo suficientemente precisos.

..    - Copie la l√≠nea 11 en la l√≠nea 12. En la l√≠nea 12, cambie ``1.41421`` a ``1.41``. Ejecutar. La prueba falla.

..    - Escriba ``, 2`` despu√©s de 1.41. (El 2 representa la precisi√≥n de la prueba: cu√°ntos d√≠gitos a la derecha del decimal deben ser correctos). Ejecutar.

..    Ahora pasan las cuatro pruebas. ¬°Maravilloso! Sin embargo, es posible que a√∫n necesite realizar pruebas adicionales.

Cuando comienzas, puedes agregar solo una o dos l√≠neas de c√≥digo a la vez. A medida que ganes m√°s experiencia, podr√≠a encontrar
usted mismo escribiendo y depurando fragmentos conceptuales m√°s grandes. A medida que mejore sus habilidades de programaci√≥n, deber√≠a
gestionar trozos cada vez m√°s grandes: esto es muy similar a la forma en que aprendimos a leer letras, s√≠labas, palabras, frases,
oraciones, p√°rrafos, etc., o la forma en que aprendemos a tocar m√∫sica --- desde notas individuales hasta acordes, compases, frases, etc.

Los aspectos clave del proceso son:

#. Aseg√∫rese de saber lo que est√° tratando de lograr. Entonces puedes escribir pruebas unitarias apropiadas.
#. Comience con un programa de esqueleto funcional y realice peque√±os cambios incrementales. A cualquier
   punto, si hay un error, sabr√° exactamente d√≥nde est√°.
#. Use variables temporales para mantener valores intermedios para que pueda inspeccionar f√°cilmente
   y verif√≠quelos.
#. Una vez que el programa est√° funcionando, es posible que desee consolidar varias declaraciones
   en expresiones compuestas,
   pero solo haga esto si no hace que el programa sea m√°s dif√≠cil de leer.
