..  Copyright (C)  Paul Resnick.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".


üë©‚Äçüíª Cu√°ndo usar try/except
----------------------------

Debe usar try/except cuando tiene un bloque de c√≥digo para ejecutar que a veces se ejecutar√° correctamente y otras no, dependiendo de las condiciones que no puede prever en el momento en que escribe el c√≥digo.

Por ejemplo, cuando ejecuta c√≥digo que obtiene datos de un sitio web, puede ejecutar el c√≥digo cuando no tiene una conexi√≥n de red o cuando el sitio web externo no responde temporalmente. Si su programa a√∫n puede hacer algo √∫til en esas situaciones, le gustar√≠a manejar la excepci√≥n y ejecutar el resto de su c√≥digo.

Como otro ejemplo, supongamos que ha obtenido algunos datos anidados de un sitio web en un diccionario d. Cuando intenta extraer elementos espec√≠ficos, pueden faltar algunos: d puede no incluir una clave en particular, por ejemplo. Si anticipa que una clave en particular podr√≠a no estar presente, puede escribir un cheque if..else para encargarse de ello.

.. sourcecode:: python

    if somekey in d:
        # it's there; extract the data
        extract_data(d)
    else:
        skip_this_one(d)

Sin embargo, si extrae muchos datos diferentes, puede ser tedioso verificarlos todos. Puede atrapar toda la extracci√≥n de datos en un try/except

.. sourcecode:: python

    try:
        extract_data(d)
    except:
        skip_this_one(d)

Se considera una mala pr√°ctica atrapar todas las excepciones de esta manera. En cambio, python proporciona un mecanismo para especificar solo ciertos tipos de excepciones que detectar√° (por ejemplo, solo capturando excepciones de tipo KeyError, que ocurre cuando falta una clave en un diccionario.

.. sourcecode:: python

    try:
        extract_data(d)
    except KeyError:
        skip_this_one(d)

No entraremos en m√°s detalles sobre el manejo de excepciones en este curso introductorio. Mira la secci√≥n `tutorial de Python sobre manejo de errores <https://docs.python.org/3/tutorial/errors.html>`_ en el sitio oficial  si te interesa saber m√°s.