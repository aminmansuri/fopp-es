..  Copyright (C)  Paul Resnick.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. qnum::
   :prefix: seqmut-11-
   :start: 1

üë©‚Äçüíª  Estrategias para Accumulator Pattern
============================================

Cu√°ndo Usarlo
--------------

Cuando los ni√±os se encuentran por primera vez con problemas de palabras en sus clases de matem√°ticas, les resulta dif√≠cil traducir esas palabras en expresiones aritm√©ticas que implican suma, resta, multiplicaci√≥n y divisi√≥n. Los profesores ofrecen heur√≠stica. Si el problema dice "cu√°ntos ... en total", ese es un problema adicional. Si dice "cu√°ntos quedan", ser√° un problema de resta.

Aprender a usar el patr√≥n acumulador puede ser igualmente confuso. El primer paso es reconocer algo en el enunciado del problema que sugiere un patr√≥n de acumulaci√≥n. Aqu√≠ hay algunos. Es posible que desee intentar agregar algunos m√°s.

+----------------+----------------------+
| Phrase         | Accumulation Pattern |
+----------------+----------------------+
| how many       | count accumulation   |
+----------------+                      +
| how frequently |                      |
+----------------+----------------------+
| total          | sum accumulation     |
+----------------+----------------------+
| a list of      | list accumulation    |
+----------------+----------------------+
| concatenate    |                      |
+----------------+  string accumulation +
| join together  |                      |
+----------------+----------------------+
+----------------+----------------------+

Por ejemplo, si el problema es calcular la distancia total recorrida en una serie de viajes peque√±os, querr√°s acumular una suma. Si el problema es hacer una lista de los cubos de todos los n√∫meros del 1 al 25, desea una acumulaci√≥n de la lista, comenzando con una lista vac√≠a y agregando un cubo m√°s cada vez. Si el problema es hacer una lista separada por comas de todas las personas invitadas a una fiesta, debe pensar en concatenarlas; podr√≠a comenzar con una cadena vac√≠a y concatenar a una persona m√°s en cada iteraci√≥n a trav√©s de una lista de nombres.

Antes de escribirlo
--------------------

Antes de escribir cualquier c√≥digo, le recomendamos que primero responda las siguientes preguntas:

- ¬øA trav√©s de qu√© secuencia iterar√°s mientras acumulas un resultado? Podr√≠a ser un rango de n√∫meros, las letras en una cadena o alguna lista existente que tenga como una lista de nombres.

- ¬øQu√© tipo de valor acumular√°s? Si su resultado final ser√° un n√∫mero, su acumulador comenzar√° con un n√∫mero y siempre tendr√° un n√∫mero aunque se actualice cada vez. Del mismo modo, si su resultado final ser√° una lista, comience con una lista. Si su resultado final ser√° una cadena, probablemente quiera comenzar con una cadena; otra opci√≥n es acumular una lista de cadenas y luego usar el m√©todo `.join ()` al final para concatenarlos todos juntos.

Recomendamos escribir sus respuestas a estas preguntas en un comentario. Cuando encuentre errores y tenga que buscar cosas, le ayudar√° a recordar lo que estaba tratando de implementar. A veces, solo escribir el comentario puede ayudarlo a darse cuenta de un problema potencial y evitarlo antes de escribir cualquier c√≥digo.

Elegir buenos nombres de variables de acumulador e iterador
-------------------------------------------------------------

El √∫ltimo consejo con respecto a las estrategias de acumulaci√≥n debe ser intencional al elegir nombres de variables para
acumulador e iterador de variables. Un buen nombre puede ayudarlo a recordar cu√°l es el valor asignado a la variable como
as√≠ como lo que deber√≠a tener al final de su c√≥digo. Si bien puede ser tentador al principio usar un nombre corto de variable,
como ``a`` o ``x``, si encuentra alg√∫n error o mira su c√≥digo m√°s tarde, puede tener problemas para entender lo que
destinado a hacer y lo que su c√≥digo est√° haciendo realmente.

Para la variable acumuladora, una cosa que puede ayudar es hacer que el nombre de la variable termine con "so_far". El prefijo puede ser algo que te ayude a recordar lo que se supone que debes terminar. Por ejemplo: `count_so_far`, `total_so_far` o `cubes_so_far`.

Como se mencion√≥ anteriormente en un segmento anterior de El camino del Programador:ref:`naming_variables_in_for_loops`, la variable iterador debe ser un sustantivo singular. Debe describir qu√© elemento de la secuencia original, no cu√°l ser√° el elemento del resultado final. Por ejemplo, cuando acumule los cubos de los n√∫meros del 1 al 25, no escriba `for num in range(25):`. En su lugar, escriba `for num in range (25):`. Si nombra la variable iteradora `cube` corre el riesgo de confundirse de que ya ha sido cubicada, cuando esa es una operaci√≥n que todav√≠a tiene que escribir en su c√≥digo.

**Revisa tu entendimiento**

.. mchoice:: question8_11_1
   :answer_a: S√≠; "guardar... a una lista"
   :answer_b: Yes; "agregar 'ed' al final de la palabra"
   :answer_c: No
   :feedback_a: ¬°Correcto!
   :feedback_b: No del todo: estas palabras no necesariamente significan que queremos acumular las nuevas cadenas en una nueva variable.
   :feedback_c: ¬°En este caso, ser√≠a bueno usar un accumulation pattern!
   :correct: a
   :practice: T

   ¬øEl siguiente mensaje requiere un patr√≥n de acumulaci√≥n? Si es as√≠, ¬øqu√© palabras indican eso? Para cada cadena en ``wrds``, agregue 'ed' al final de la palabra (paraconjugar la palabra en tiempo pasado). Guarde estas palabras en tiempo pasado en una lista llamada ``past_wrds``.

.. mchoice:: question8_11_2
   :answer_a: S√≠; "para resumir"
   :answer_b: S√≠; "n√∫meros en la lista"
   :answer_c: No
   :feedback_a: ¬°Correcto!
   :feedback_b: No del todo, estas palabras no necesariamente significan que queremos hacer una acumulaci√≥n de suma.
   :feedback_c: ¬°En este caso, un patr√≥n de acumulaci√≥n ser√≠a bueno para usar!
   :correct: a
   :practice: T

   ¬øEl siguiente mensaje requiere un patr√≥n de acumulaci√≥n? Si es as√≠, ¬øqu√© palabras indican eso? Escriba el c√≥digo para resumir todos los n√∫meros en la lista ``seat_counts``. Almacene ese n√∫mero en la variable ``total_seat_counts``.

.. mchoice:: question8_11_3
   :answer_a: S√≠; "imprimir cada uno"
   :answer_b: S√≠; "en una l√≠nea separada"
   :answer_c: No
   :feedback_a: Incorrecto, este aviso no necesita usar el patr√≥n de acumulaci√≥n.
   :feedback_b: Incorrecto, este aviso no necesita usar el patr√≥n de acumulaci√≥n.
   :feedback_c: ¬°Correcto!
   :correct: c
   :practice: T

   ¬øEl siguiente mensaje requiere un patr√≥n de acumulaci√≥n? Si es as√≠, ¬øqu√© palabras indican eso? Escriba el c√≥digo para imprimir cada car√°cter de la cadena ``my_str`` en una l√≠nea separada.

.. mchoice:: question8_11_4
   :answer_a: S√≠; "vocales en la oraci√≥n"
   :answer_b: S√≠; "c√≥digo que contar√°"
   :answer_c: No
   :feedback_a: No del todo, estas palabras no necesariamente significan que queremos hacer una acumulaci√≥n de suma.
   :feedback_b: ¬°Correcto!
   :feedback_c: ¬°En este caso, un patr√≥n de acumulaci√≥n ser√≠a bueno para usar!
   :correct: b
   :practice: T

   ¬øEl siguiente mensaje requiere un patr√≥n de acumulaci√≥n? Si es as√≠, ¬øqu√© palabras indican eso? Escriba un c√≥digo que cuente el n√∫mero de vocales en la oraci√≥n ``s`` y asigne el resultado a la variable ``num_vowels``.

.. mchoice:: question8_11_5
   :answer_a: string
   :answer_b: list
   :answer_c: integer
   :answer_d: ninguno, no hay variable acumuladora.
   :feedback_a: Incorrecto, ese no es el mejor tipo para la variable del acumulador.
   :feedback_b: Incorrecto, ese no es el mejor tipo para la variable del acumulador.
   :feedback_c: S√≠, porque queremos hacer un seguimiento de un n√∫mero.
   :feedback_d: Incorrecto, necesitaremos una variable acumuladora.
   :correct: c
   :practice: T

   ¬øQu√© tipo se debe usar para la variable acumuladora en el siguiente mensaje? Escriba un c√≥digo que cuente el n√∫mero de vocales en la oraci√≥n ``s`` y asigne el resultado a la variable ``num_vowels``.

.. mchoice:: question8_11_6
   :answer_a: num_vowels
   :answer_b: s
   :answer_c: the prompt does not say
   :feedback_a: No, esa es la variable acumuladora.
   :feedback_b: S√≠, esa es la secuencia por la que iterar√°s.
   :feedback_c: It is stated in the prompt.
   :correct: b
   :practice: T

   ¬øA trav√©s de qu√© secuencia iterar√° mientras acumula un resultado en el siguiente mensaje? Escriba un c√≥digo que cuente el n√∫mero de vocales en la oraci√≥n ``s`` y asigne el resultado a la variable ``num_vowels``.

.. mchoice:: question8_11_7
   :answer_a: string
   :answer_b: list
   :answer_c: integer
   :answer_d: ninguno, no hay variable acumuladora.
   :feedback_a: Incorrecto, ese no es el mejor tipo para la variable del acumulador.
   :feedback_b: S√≠, porque queremos una nueva lista al final del c√≥digo.
   :feedback_c: Incorrecto, ese no es el mejor tipo para la variable del acumulador.
   :feedback_d: Incorrecto, necesitaremos una variable acumuladora.
   :correct: b
   :practice: T

   ¬øQu√© tipo se debe usar para la variable acumuladora en el siguiente mensaje? Para cada cadena en ``wrds``, agregue 'ed' al final de la palabra (para conjugar la palabra en tiempo pasado). Guarde estas palabras en tiempo pasado en una lista llamada ``past_wrds``.

.. mchoice:: question8_11_8
   :answer_a: wrds
   :answer_b: past_wrds
   :answer_c: the prompt does not say
   :feedback_a: S√≠, esa es la secuencia por la que iterar√°s.
   :feedback_b: No, esa es la variable acumuladora.
   :feedback_c: It is stated in the prompt.
   :correct: a
   :practice: T

   ¬øA trav√©s de qu√© secuencia iterar√° mientras acumula un resultado en el siguiente mensaje? Para cada cadena en ``wrds``, agregue 'ed' al final de la palabra (para conjugar la palabra en tiempo pasado). Guarde estas palabras en tiempo pasado en una lista llamada ``past_wrds``.

.. mchoice:: question8_11_9
   :answer_a: string
   :answer_b: list
   :answer_c: integer
   :answer_d: ninguno, no hay variable acumuladora.
   :feedback_a: Incorrecto, ese no es el mejor tipo para la variable del acumulador.
   :feedback_b: Incorrecto, ese no es el mejor tipo para la variable del acumulador.
   :feedback_c: S√≠, porque queremos hacer un seguimiento de un n√∫mero.
   :feedback_d: Incorrecto, necesitaremos una variable acumuladora.
   :correct: c
   :practice: T

   ¬øQu√© tipo se debe usar para la variable acumuladora en el siguiente mensaje? Escriba el c√≥digo para resumir todos los n√∫meros en la lista ``seat_counts``. Almacene ese n√∫mero en la variable ``total_seat_counts``.

.. mchoice:: question8_11_10
   :answer_a: seat_counts
   :answer_b: total_seat_counts
   :answer_c: the prompt does not say
   :feedback_a: S√≠, esa es la secuencia por la que iterar√°s.
   :feedback_b: No, esa es la variable acumuladora.
   :feedback_c: It is stated in the prompt.
   :correct: a
   :practice: T

    ¬øA trav√©s de qu√© secuencia iterar√° mientras acumula un resultado en el siguiente mensaje? Escriba el c√≥digo para resumir todos los n√∫meros en la lista ``seat_counts``. Almacene ese n√∫mero en la variable ``total_seat_counts``.

.. mchoice:: question8_11_11
   :answer_a: string
   :answer_b: list
   :answer_c: integer
   :answer_d: ninguno, no hay variable acumuladora.
   :feedback_a: Incorrecto, no deber√≠a haber una variable acumuladora.
   :feedback_b: Incorrecto, no deber√≠a haber una variable acumuladora.
   :feedback_c: Incorrecto, no deber√≠a haber una variable acumuladora.
   :feedback_d: Correcto, porque este mensaje no requiere un patr√≥n acumulador.
   :correct: d
   :practice: T

   ¬øQu√© tipo se debe usar para la variable acumuladora en el siguiente mensaje? Escriba el c√≥digo para imprimir cada car√°cter de la cadena ``my_str`` en una l√≠nea separada.

.. mchoice:: question8_11_12
   :answer_a: my_str
   :answer_b: my_str.split()
   :answer_c: the prompt does not say
   :feedback_a: S√≠, esa es la secuencia por la que iterar√°s.
   :feedback_b: Cperder, pero lea el mensaje nuevamente: ¬ødec√≠a iterar a trav√©s de las palabras?
   :feedback_c: It is stated in the prompt.
   :correct: a
   :practice: T

   ¬øA trav√©s de qu√© secuencia iterar√° mientras acumula un resultado en el siguiente mensaje? Escriba el c√≥digo para imprimir cada car√°cter de la cadena ``my_str`` en una l√≠nea separada.

.. mchoice:: question8_11_13
   :answer_a: Variable Acumuladora: wrds_so_far     ; Variable Iteradora: wrd
   :answer_b: Variable Acumuladora: wrds_so_far     ; Variable Iteradora: x
   :answer_c: Variable Acumuladora: changed_wrds    ; Variable Iteradora: ed
   :feedback_a: S√≠, esta es la combinaci√≥n m√°s clara de variables de acumulador e iterador.
   :feedback_b: La variable iteradora no es la m√°s clara aqu√≠, algo m√°s puede ser mejor.
   :feedback_c: La variable iteradora no es la m√°s clara aqu√≠
   :correct: a
   :practice: T

   ¬øCu√°les de estas son buenas alternativas a la variable del acumulador y los nombres de las variables del iterador para el siguiente mensaje? Para cada cadena en ``wrds``, agregue 'ed' al final de la palabra (para hacer que la palabra en tiempo pasado). Guarde estas palabras en tiempo pasado en una lista llamada ``past_wrds``.

.. mchoice:: question8_11_14
   :answer_a: Variable Acumuladora: count_so_far  ; Variable Iteradora: l
   :answer_b: Variable Acumuladora: total_so_far  ; Variable Iteradora: letter
   :answer_c: Variable Acumuladora: n_v           ; Variable Iteradora: letter
   :feedback_a: Aunque la variable acumuladora es buena, la variable iteradora no est√° muy clara.
   :feedback_b: ¬°S√≠! Tanto la variable del acumulador como la del iterador son claras.
   :feedback_c: Aunque la variable iteradora es buena, la variable acumuladora no es muy clara.
   :correct: b
   :practice: T

   ¬øCu√°les de estas son buenas alternativas a la variable del acumulador y los nombres de las variables del iterador para el siguiente mensaje? Escriba un c√≥digo que cuente el n√∫mero de vocales en la oraci√≥n ``s`` y asigne el resultado a la variable ``num_vowels``.

.. mchoice:: question8_11_15
   :answer_a: Variable Acumuladora: total_so_far        ; Variable Iteradora: seat
   :answer_b: Variable Acumuladora: total_seats_so_far  ; Variable Iteradora: seat_count
   :answer_c: Variable Acumuladora: count               ; Variable Iteradora: n
   :feedback_a: Aunque la variable del acumulador es buena, la variable del iterador no es lo suficientemente clara.
   :feedback_b: S√≠, esta es la combinaci√≥n m√°s clara.
   :feedback_c: Ni el acumulador ni la variable iterador son lo suficientemente claros. La variable del acumulador es mejor, pero podr√≠a ser m√°s clara.
   :correct: b
   :practice: T

   ¬øCu√°les de estas son buenas alternativas a la variable del acumulador y los nombres de las variables del iterador para el siguiente mensaje? Escriba el c√≥digo para resumir todos los n√∫meros en la lista ``seat_counts``. Almacene ese n√∫mero en la variable ``total_seat_counts``.

.. mchoice:: question8_11_16
   :answer_a: Variable Acumuladora: character_so_far    ; Variable Iteradora: char
   :answer_b: Variable Acumuladora: no variable needed  ; Variable Iteradora: c
   :answer_c: Variable Acumuladora: no variable needed  ; Variable Iteradora: char
   :feedback_a: Incorrecto, no hay variable de acumulador necesaria
   :feedback_b: Aunque no se necesita una variable acumuladora, la variable iteradora no es lo suficientemente clara
   :feedback_c: S√≠, no se necesita una variable acumuladora y la variable iteradora es clara (char es una forma abreviada de character)
   :correct: c
   :practice: T

   ¬øCu√°les de estas son buenas alternativas a la variable del acumulador y los nombres de las variables del iterador para el siguiente mensaje? Escriba el c√≥digo para imprimir cada car√°cter de la cadena ``my_str`` en una l√≠nea separada.
